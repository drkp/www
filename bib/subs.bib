
@InProceedings{hercules,
  author =        { Niel Lebeck and Jonathan Goldstein and Irene Zhang},
  month =         8,
  title =         { Hercules: A Multi-View Cache for Real-Time Interactive Apps},
  year =          2020,
  booktitle = submission,
  url = {papers/hercules.pdf},
  abstract = {Existing distributed storage systems}}
 


@InProceedings{ambrosia-vldb,
  author =        { Jonathan Goldstein and Ahmed Abdelhamid and Mike
                  Barnett and Sebastian Burckhardt and Badrish
                  Chandramouli and Darren Gehring and Niel Lebeck and
                  Christopher Meiklejohn and Umar Farooq Minhas and
                  Ryan Newton and Rahee Peshawaria and Tal Zaccai and
                  Irene Zhang },
  month =         8,
  title =         {A.M.B.R.O.S.I.A: Providing Performant Virtual Resiliency for Distributed Applications},
  year =          2020,
  booktitle = vldb,
  url = {papers/ambrosia-vldb20.pdf},
  abstract = {fdafe}}

@InProceedings{leap-asplos,
  author =        {Huaicheng Li and Mingzhe Hao and Stanko Novakovic
                  and Vaibhav Gogte and Sriram Govindan and Dan
                  R. K. Ports and Irene Zhang and Ricardo
                  Bianchini and Haryadi S. Gunawi and Anirudh Badam},
  month =         4,
  title =         {Efficient and Portable Virtual NVMe Storage on ARM SoCs},
  year =          2020,
  booktitle = asplos,
  url = {papers/leap-asplos20.pdf},
  abstract = {Today's cloud storage stack is extremely resource
                  hungry, burning 10-20% of datacenter x86 cores, a
                  major "storage tax" that cloud providers must
                  pay. Yet complex cloud storage stack is not
                  completely offload ready to today's I/O
                  accelerators. We present Leap, a new cloud storage
                  stack that leverages ARM-based co-processors to
                  offload complex storage services. Leap addresses
                  many deployment challenges such as hardware
                  fungibility, software portability, virtualizability,
                  composability, and efficiency, with a set of
                  OS/software techniques and new hardware properties
                  that provide a uniform address space across the x86
                  and ARM cores and expose a virtual NVMe storage to
                  unmodified guest VMs, with a competitive speed to
                  bare-metal performance.}}

@InProceedings{marvin-submission,
  author =        {Niel Lebeck and Arvind Krishnamurthy and Henry M. Levy and Irene Zhang},
  month =         4,
  year =          2020,
  booktitle = submission,
  title =         {End the Senseless Killing: Improving Memory Management for Mobile Operating Systems},
    url={papers/marvin-asplos.pdf},
  abstract =      {To ensure low-latency memory allocation, mobile
                  operating systems needing memory kill applications
                  instead of swapping memory to disk.  This design
                  choice shifts the burden of managing over-utilized
                  memory to application programmers, requiring them to
                  constantly checkpoint their application state to
                  disk. This paper presents Marvin, a new memory
                  manager for mobile platforms that efficiently
                  supports swapping while meeting the strict
                  performance requirements of mobile apps.  Marvin's
                  swap-enabled language runtime is co-designed with
                  OS-level memory management to avoid common pitfalls
                  of traditional swap mechanisms. Its three key
                  features include: (1) a new swap mechanism, called
                  ahead-of-time (AOT) swap, which pre-writes
                  memory to disk, then harvests it quickly when
                  needed, (2) a modified bookmarking garbage collector
                  that avoids swapping in unused memory, and (3) an
                  object-granularity working set estimator. Our
                  experiments show that Marvin can run more than 2x as
                  many concurrent apps as Android, and that Marvin can
                  reclaim memory over 60x faster than Android with a
                  Linux swap file can allocate memory under memory
                  pressure.  }}
